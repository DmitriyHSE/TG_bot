import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import motor.motor_asyncio
from datetime import datetime
from collections import Counter

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "8173550758:AAGe9DSFiKnm24xvn7j5xGf4iQkxyfMZ14k"

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π MongoDB
MONGO_URI = "mongodb://localhost:27017"
client = motor.motor_asyncio.AsyncIOMotorClient(MONGO_URI)

# –í—ã–±–æ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
db = client.Telegram
collection = db.Tg

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
async def check_connection():
    try:
        await client.admin.command("ping")
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class TaskForm(StatesGroup):
    waiting_for_task = State()
    waiting_for_deadline_date = State()
    waiting_for_deadline_time = State()
    waiting_for_notes = State()
    waiting_for_date_to_delete = State()

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–µ–ª –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_todo_list(user_id):
    user = await collection.find_one({"user_id": user_id})
    if user and "tasks" in user:
        return user["tasks"]
    return []

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def add_task_to_db(user_id, username, task_text, deadline, notes=""):
    try:
        await collection.update_one(
            {"user_id": user_id},
            {
                "$setOnInsert": {"user_id": user_id, "username": username},
                "$push": {
                    "tasks": {
                        "task_text": task_text,
                        "deadline": deadline,
                        "notes": notes,
                        "status": "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"  # –°—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    }
                }
            },
            upsert=True
        )
        print(f"–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: user_id={user_id}, username={username}, task={task_text}, deadline={deadline}, notes={notes}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
async def update_task_status(task):
    try:
        deadline = datetime.strptime(task["deadline"], "%d-%m-%Y %H:%M")
        now = datetime.now()
        if task["status"] != "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ":  # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
            if now > deadline:
                task["status"] = "–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"
    except ValueError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç—ã: {e}")
    return task

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø–∏—Å–∫–∞ –¥–µ–ª
async def create_todo_keyboard(tasks):
    buttons = []
    for task in tasks:
        if isinstance(task, dict):
            task_text = task.get("task_text")
            if task_text:
                buttons.append([KeyboardButton(text=task_text)])
    buttons.append([KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")])
    buttons.append([KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –¥–µ–ª–∞ –ø–æ –¥–∞—Ç–µ")])
    buttons.append([KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, one_time_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[[
        KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–µ–ª")
    ],
    [
        KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    ]],
    resize_keyboard=True
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user = await collection.find_one({"user_id": user_id})

    if user is None:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫ –ø–æ–ª–µ–π
        new_user = {"user_id": user_id, "username": username}
        await collection.insert_one(new_user)
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Å ID {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
    else:
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Å ID {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–µ–ª"
@dp.message(lambda message: message.text == "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–µ–ª")
async def show_todo_list(message: types.Message):
    user_id = message.from_user.id
    tasks = await get_todo_list(user_id)

    if tasks:
        task_list_text = "–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n"
        for task_data in tasks:
            if isinstance(task_data, dict):
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
                task_data = await update_task_status(task_data)
                task_text = task_data.get('task_text')
                deadline_str = task_data.get('deadline')
                status = task_data.get('status', '–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ')

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–º–∞–π–ª–∏–∫ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
                status_emoji = {
                    "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ": "üü°",
                    "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ": "‚úÖ",
                    "–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ": "‚ùå"
                }.get(status, "üü°")

                if task_text and deadline_str:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–µ–¥–ª–∞–π–Ω–∞ –≤ –æ–±—ä–µ–∫—Ç datetime
                    try:
                        deadline = datetime.strptime(deadline_str, "%d-%m-%Y %H:%M")
                        now = datetime.now()
                        time_left = deadline - now
                        days = time_left.days
                        hours, remainder = divmod(time_left.seconds, 3600)
                        minutes = remainder // 60

                        time_left_str = f"{days} –¥–Ω–µ–π, {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç"

                        task_list_text += f"<b>{status_emoji} –ó–∞–¥–∞—á–∞:</b> {task_text}\n"
                        task_list_text += f"<b>–î–µ–¥–ª–∞–π–Ω:</b> {deadline_str}\n"
                        if time_left.days < 0 or minutes < 0 or hours < 0:
                            task_list_text += f"<b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞!</b>\n"
                        else:
                            task_list_text += f"<b>–û—Å—Ç–∞–ª–æ—Å—å:</b> {time_left_str}\n"
                        task_list_text += "------\n"

                    except ValueError as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç—ã: {e}")
                        task_list_text += f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–µ–¥–ª–∞–π–Ω–∞\n" #–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫

        todo_keyboard = await create_todo_keyboard(tasks)
        await message.answer(task_list_text, reply_markup=todo_keyboard, parse_mode="HTML")
    else:
        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É" –∏ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
        empty_list_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")],
                [KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
            ],
            resize_keyboard=True
        )
        await message.answer("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.", reply_markup=empty_list_keyboard, parse_mode="HTML")

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–¥–∞—á–µ–π
async def is_task_message(message: types.Message) -> bool:
    user_id = message.from_user.id
    tasks = await get_todo_list(user_id)
    return message.text in [task.get("task_text") for task in tasks]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏
@dp.message(is_task_message)
async def show_task_details(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    tasks = await get_todo_list(user_id)
    task_text = message.text

    for task in tasks:
        if task.get("task_text") == task_text:
            deadline_str = task.get("deadline")
            notes = task.get("notes", "–ü—Ä–∏–º–µ—á–∞–Ω–∏–π –Ω–µ—Ç.")
            status = task.get("status", "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ")
            status_emoji = {
                "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ": "üü°",
                "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ": "‚úÖ",
                "–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ": "‚ùå"
            }.get(status, "üü°")

            try:
                deadline = datetime.strptime(deadline_str, "%d-%m-%Y %H:%M")
                now = datetime.now()
                time_left = deadline - now
                days = time_left.days
                hours, remainder = divmod(time_left.seconds, 3600)
                minutes = remainder // 60
                time_left_str = f"{days} –¥–Ω–µ–π, {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç"

                response_text = f"<b>{status_emoji} {task_text}</b>\n"
                response_text += f"<b>–î–µ–¥–ª–∞–π–Ω:</b> {deadline_str}\n"
                if time_left.days < 0 or minutes < 0 or hours < 0:
                     response_text += f"<b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞!</b>\n"
                else:
                    response_text += f"<b>–û—Å—Ç–∞–ª–æ—Å—å:</b> {time_left_str}\n"
                response_text += f"<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</b> {notes}\n"

            except ValueError as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç—ã: {e}")
                response_text = f"<b>{status_emoji} {task_text}</b>\n"
                response_text += f"<b>–î–µ–¥–ª–∞–π–Ω:</b> –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–µ–¥–ª–∞–π–Ω–∞\n"
                response_text += f"<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</b> {notes}\n"

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(task_to_delete=task_text)
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–º
            markup = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")],
                    [KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å –∑–∞–¥–∞—á—É –≤ –æ–∂–∏–¥–∞–Ω–∏–µ")] if task.get("status") == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" else [],
                    [KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")],
                    [KeyboardButton(text="–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á")]
                ],
                resize_keyboard=True
            )
            await message.answer(response_text, reply_markup=markup, parse_mode="HTML")
            break
    else:
        await message.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
@dp.message(lambda message: message.text == "–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
async def mark_task_as_done(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = await state.get_data()
    task_text = user_data.get("task_to_delete")

    if task_text:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user = await collection.find_one({"user_id": user_id, "tasks.task_text": task_text})
        task = next((t for t in user["tasks"] if t["task_text"] == task_text), None)

        if task:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞
            deadline = datetime.strptime(task["deadline"], "%d-%m-%Y %H:%M")
            now = datetime.now()
            if now > deadline:
                await message.answer("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é.")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await collection.update_one(
                {"user_id": user_id, "tasks.task_text": task_text},
                {"$set": {"tasks.$.status": "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"}}
            )
            await message.answer(f"–ó–∞–¥–∞—á–∞ '{task_text}' –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è ‚úÖ.")

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
            await show_todo_list(message)
        else:
            await message.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_keyboard)
    else:
        await message.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ —Å "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" –Ω–∞ "–≤ –æ–∂–∏–¥–∞–Ω–∏–∏"
@dp.message(lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å –∑–∞–¥–∞—á—É –≤ –æ–∂–∏–¥–∞–Ω–∏–µ")
async def mark_task_as_pending(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = await state.get_data()
    task_text = user_data.get("task_to_delete")

    if task_text:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await collection.update_one(
            {"user_id": user_id, "tasks.task_text": task_text},
            {"$set": {"tasks.$.status": "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"}}
        )
        await message.answer(f"–ó–∞–¥–∞—á–∞ '{task_text}' –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–µ üü°.")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
        await show_todo_list(message)
    else:
        await message.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
@dp.message(lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
async def delete_task(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = await state.get_data()
    task_text = user_data.get("task_to_delete")

    if task_text:
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await collection.update_one(
            {"user_id": user_id},
            {"$pull": {"tasks": {"task_text": task_text}}}
        )
        await message.answer(f"–ó–∞–¥–∞—á–∞ '{task_text}' —É–¥–∞–ª–µ–Ω–∞ üóëÔ∏è.")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
        await show_todo_list(message)
    else:
        await message.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
@dp.message(lambda message: message.text == "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á")
async def back_to_tasks(message: types.Message):
    await show_todo_list(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"
@dp.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def add_task(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
    await state.set_state(TaskForm.waiting_for_task)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
@dp.message(TaskForm.waiting_for_task)
async def get_task_text(message: types.Message, state: FSMContext):
    task_text = message.text
    await state.update_data(task_text=task_text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì:")
    await state.set_state(TaskForm.waiting_for_deadline_date)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã –¥–µ–¥–ª–∞–π–Ω–∞
@dp.message(TaskForm.waiting_for_deadline_date)
async def get_deadline_date(message: types.Message, state: FSMContext):
    try:
        deadline_date = message.text
        deadline_datetime = datetime.strptime(deadline_date, "%d-%m-%Y")
        now = datetime.now()
        if deadline_datetime.date() < now.date():
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì:")
            return
        await state.update_data(deadline_date=deadline_date)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–µ–¥–ª–∞–π–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç):")
        await state.set_state(TaskForm.waiting_for_deadline_time)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î-–ú–ú-–ì–ì–ì–ì.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–µ–¥–ª–∞–π–Ω–∞
@dp.message(TaskForm.waiting_for_deadline_time)
async def get_deadline_time(message: types.Message, state: FSMContext):
    try:
        deadline_time = message.text
        datetime.strptime(deadline_time, "%H:%M")  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        user_data = await state.get_data()
        task_text = user_data.get('task_text')
        deadline_date = user_data.get('deadline_date')

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Å—Ç—Ä–æ–∫—É
        deadline_str = f"{deadline_date} {deadline_time}"
        deadline = datetime.strptime(deadline_str, "%d-%m-%Y %H:%M")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–¥–ª–∞–π–Ω –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        now = datetime.now()
        if deadline < now:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
            return

        await state.update_data(deadline=deadline_str)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ –∑–∞–¥–∞—á–µ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
        await state.set_state(TaskForm.waiting_for_notes)

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç).")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–º–µ—á–∞–Ω–∏–π
@dp.message(TaskForm.waiting_for_notes)
async def get_notes(message: types.Message, state: FSMContext):
    notes = message.text
    if notes == "/skip":
        notes = ""

    user_data = await state.get_data()
    task_text = user_data.get('task_text')
    deadline = user_data.get('deadline')

    user_id = message.from_user.id
    username = message.from_user.username
    await add_task_to_db(user_id, username, task_text, deadline, notes)
    await message.answer(f"–ó–∞–¥–∞—á–∞ '{task_text}' —Å –¥–µ–¥–ª–∞–π–Ω–æ–º '{deadline}' –∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è–º–∏ '{notes}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    await state.clear()
    await show_todo_list(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –¥–µ–ª–∞ –ø–æ –¥–∞—Ç–µ"
@dp.message(lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –¥–µ–ª–∞ –ø–æ –¥–∞—Ç–µ")
async def delete_tasks_by_date(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á:")
    await state.set_state(TaskForm.waiting_for_date_to_delete)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ –¥–∞—Ç–µ
@dp.message(TaskForm.waiting_for_date_to_delete)
async def delete_tasks_by_date_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    date_to_delete = message.text

    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç datetime
        date_to_delete = datetime.strptime(date_to_delete, "%d-%m-%Y").date()

        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π
        await collection.update_one(
            {"user_id": user_id},
            {"$pull": {"tasks": {"deadline": {"$regex": f"{date_to_delete.strftime('%d-%m-%Y')}"}}}}
        )
        await message.answer(f"–í—Å–µ –∑–∞–¥–∞—á–∏ –Ω–∞ {date_to_delete.strftime('%d-%m-%Y')} —É–¥–∞–ª–µ–Ω—ã üóëÔ∏è.")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î-–ú–ú-–ì–ì–ì–ì.")

    await state.clear()
    await show_todo_list(message)


# –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@dp.message(lambda message: message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: types.Message):
    user_id = message.from_user.id
    tasks = await get_todo_list(user_id)

    if tasks:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–¥ –ø–æ–¥—Å—á–µ—Ç–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        updated_tasks = []
        for task in tasks:
            updated_task = await update_task_status(task)
            updated_tasks.append(updated_task)

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        statuses = [task.get("status", "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ") for task in updated_tasks]

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Counter –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        status_counts = Counter(statuses)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º:</b>\n"
        stats_text += f"üü° –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {status_counts.get('–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ', 0)}\n"
        stats_text += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {status_counts.get('–≤—ã–ø–æ–ª–Ω–µ–Ω–æ', 0)}\n"
        stats_text += f"‚ùå –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {status_counts.get('–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ', 0)}\n"

        await message.answer(stats_text, parse_mode="HTML")
    else:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
@dp.message(lambda message: message.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_main_menu(message: types.Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await check_connection()
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
