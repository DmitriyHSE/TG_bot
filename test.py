import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import motor.motor_asyncio
from datetime import datetime
from collections import Counter
from celery import Celery
from app_celery import check_overdue_tasks_and_notify
from app_celery import send_reminder

TOKEN = "7651886591:AAEAZfTe8f8ga-WJxcXo65mjBaYyixAd7fo"

MONGO_URI = "mongodb://localhost:27017"
client = motor.motor_asyncio.AsyncIOMotorClient(MONGO_URI)

db = client.Telegram
collection = db.Tg

celery_app = Celery(
    "bot_tasks",
    broker="redis://localhost:6379/0",
    backend="mongodb://localhost:27017/Telegram"
)

async def check_connection():
    try:
        await client.admin.command("ping")
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

check_overdue_tasks_and_notify.delay()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class TaskForm(StatesGroup):
    waiting_for_task = State()
    waiting_for_deadline_date = State()
    waiting_for_deadline_time = State()
    waiting_for_notes = State()
    waiting_for_notes_media = State()
    waiting_for_edit_media = State()
    waiting_for_date_to_delete = State()
    waiting_for_new_task_text = State()
    waiting_for_new_deadline_date = State()
    waiting_for_new_deadline_time = State()
    waiting_for_new_notes = State()
    waiting_for_reminder_date = State()
    waiting_for_reminder_time = State()

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–µ–ª –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_todo_list(user_id):
    user = await collection.find_one({"user_id": user_id})
    if user and "tasks" in user:
        return user["tasks"]
    return []

async def get_sorted_todo_list(user_id):
    tasks = await get_todo_list(user_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á –ø–µ—Ä–µ–¥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
    updated_tasks = []
    for task in tasks:
        updated_task = await update_task_status(task)
        updated_tasks.append(updated_task)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏ –¥–µ–¥–ª–∞–π–Ω—É
    def sort_key(task):
        status_order = {"–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ": 0, "–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ": 1, "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ": 2}
        deadline = datetime.strptime(task["deadline"], "%d-%m-%Y %H:%M")
        return (status_order.get(task["status"], 3), deadline)

    sorted_tasks = sorted(updated_tasks, key=sort_key)

    return sorted_tasks

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def add_task_to_db(user_id, username, task_text, deadline, notes="", notes_media=None):
    if notes_media is None:
        notes_media = []
    try:
        await collection.update_one(
            {"user_id": user_id},
            {
                "$setOnInsert": {"user_id": user_id, "username": username},
                "$push": {
                    "tasks": {
                        "task_text": task_text,
                        "deadline": deadline,
                        "notes": notes,
                        "notes_media": notes_media,  # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
                        "status": "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"
                    }
                }
            },
            upsert=True
        )
        print(f"–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: user_id={user_id}, username={username}, task={task_text}, deadline={deadline}, notes={notes}, notes_media={notes_media}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
async def update_task_status(task):
    try:
        deadline = datetime.strptime(task["deadline"], "%d-%m-%Y %H:%M")
        now = datetime.now()
        if task["status"] != "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ":  # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
            if now > deadline:
                task["status"] = "–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"
    except ValueError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç—ã: {e}")
    return task

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø–∏—Å–∫–∞ –¥–µ–ª
async def create_todo_keyboard(tasks):
    buttons = []
    for task in tasks:
        if isinstance(task, dict):
            task_text = task.get("task_text")
            if task_text:
                buttons.append([KeyboardButton(text=task_text)])
    buttons.append([KeyboardButton(text="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏")])
    buttons.append([KeyboardButton(text="–£–¥–∞–ª–µ–Ω–∏–µ –¥–µ–ª –ø–æ –¥–∞—Ç–µ")])
    buttons.append([KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, one_time_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[[
        KeyboardButton(text="–°–ø–∏—Å–æ–∫ –¥–µ–ª")
    ],
    [
        KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    ]],
    resize_keyboard=True
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user = await collection.find_one({"user_id": user_id})

    if user is None:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫ –ø–æ–ª–µ–π
        new_user = {"user_id": user_id, "username": username}
        await collection.insert_one(new_user)
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Å ID {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
    else:
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Å ID {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–µ–ª"
@dp.message(lambda message: message.text == "–°–ø–∏—Å–æ–∫ –¥–µ–ª")
async def show_todo_list(message: types.Message):
    user_id = message.from_user.id
    tasks = await get_sorted_todo_list(user_id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á

    if tasks:
        task_list_text = "–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n"
        for task_data in tasks:
            if isinstance(task_data, dict):
                task_text = task_data.get('task_text')
                deadline_str = task_data.get('deadline')
                status = task_data.get('status', '–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ')

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–º–∞–π–ª–∏–∫ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
                status_emoji = {
                    "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ": "üü°",
                    "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ": "‚úÖ",
                    "–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ": "‚ùå"
                }.get(status, "üü°")

                if task_text and deadline_str:
                    try:
                        deadline = datetime.strptime(deadline_str, "%d-%m-%Y %H:%M")
                        now = datetime.now()
                        time_left = deadline - now
                        days = time_left.days
                        hours, remainder = divmod(time_left.seconds, 3600)
                        minutes = remainder // 60

                        time_left_str = f"{days} –¥–Ω–µ–π, {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç"

                        task_list_text += f"<b>{status_emoji} –ó–∞–¥–∞—á–∞:</b> {task_text}\n"
                        task_list_text += f"<b>–î–µ–¥–ª–∞–π–Ω:</b> {deadline_str}\n"
                        if time_left.days < 0 or minutes < 0 or hours < 0:
                            task_list_text += f"<b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞!</b>\n"
                        else:
                            task_list_text += f"<b>–û—Å—Ç–∞–ª–æ—Å—å:</b> {time_left_str}\n"
                        task_list_text += "------\n"

                    except ValueError as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç—ã: {e}")
                        task_list_text += f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–µ–¥–ª–∞–π–Ω–∞\n"

        todo_keyboard = await create_todo_keyboard(tasks)
        await message.answer(task_list_text, reply_markup=todo_keyboard, parse_mode="HTML")
    else:
        empty_list_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏")],
                [KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
            ],
            resize_keyboard=True
        )
        await message.answer("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.", reply_markup=empty_list_keyboard, parse_mode="HTML")

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–¥–∞—á–µ–π
async def is_task_message(message: types.Message) -> bool:
    user_id = message.from_user.id
    tasks = await get_todo_list(user_id)
    return message.text in [task.get("task_text") for task in tasks]

@dp.message(is_task_message)
async def show_task_details(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    tasks = await get_todo_list(user_id)
    task_text = message.text

    for task in tasks:
        if task.get("task_text") == task_text:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            task = await update_task_status(task)

            deadline_str = task.get("deadline")
            notes = task.get("notes", "–ü—Ä–∏–º–µ—á–∞–Ω–∏–π –Ω–µ—Ç.")
            notes_media = task.get("notes_media", [])  # –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
            status = task.get("status", "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ")
            status_emoji = {
                "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ": "üü°",
                "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ": "‚úÖ",
                "–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ": "‚ùå"
            }.get(status, "üü°")

            try:
                deadline = datetime.strptime(deadline_str, "%d-%m-%Y %H:%M")
                now = datetime.now()
                time_left = deadline - now
                days = time_left.days
                hours, remainder = divmod(time_left.seconds, 3600)
                minutes = remainder // 60
                time_left_str = f"{days} –¥–Ω–µ–π, {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç"

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
                response_text = f"<b>{status_emoji} –ó–∞–¥–∞—á–∞:</b> {task_text}\n"
                response_text += f"<b>–î–µ–¥–ª–∞–π–Ω:</b> {deadline_str}\n"
                if time_left.days < 0 or minutes < 0 or hours < 0:
                    response_text += f"<b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞!</b>\n"
                else:
                    response_text += f"<b>–û—Å—Ç–∞–ª–æ—Å—å:</b> {time_left_str}\n"
                response_text += f"<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</b> {notes}\n"

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
                await message.answer(response_text, parse_mode="HTML")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
                if notes_media:
                    for media in notes_media:
                        if media["type"] == "photo":
                            await message.answer_photo(media["file_id"])
                        elif media["type"] == "document":
                            await message.answer_document(media["file_id"])

            except ValueError as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç—ã: {e}")
                response_text = f"<b>{status_emoji} {task_text}</b>\n"
                response_text += f"<b>–î–µ–¥–ª–∞–π–Ω:</b> –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–µ–¥–ª–∞–π–Ω–∞\n"
                response_text += f"<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</b> {notes}\n"
                await message.answer(response_text, parse_mode="HTML")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(task_to_delete=task_text)
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–º –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
            if task.get("status") in ["–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ", "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"]:
                markup = ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")],
                        [KeyboardButton(text="–í–æ–∑–≤—Ä–∞—Ç –∑–∞–¥–∞—á—É –≤ –æ–∂–∏–¥–∞–Ω–∏–µ")] if task.get("status") == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" else [],
                        [KeyboardButton(text="–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏")],
                        [KeyboardButton(text="–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏")],
                        [KeyboardButton(text="–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞ –∑–∞–¥–∞—á–∏")],
                        [KeyboardButton(text="–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∑–∞–¥–∞—á–∏")],
                        [KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")],  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
                        [KeyboardButton(text="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")],
                        [KeyboardButton(text="–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á")]
                    ],
                    resize_keyboard=True
                )
            else:
                markup = ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏")],
                        [KeyboardButton(text="–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á")]
                    ],
                    resize_keyboard=True
                )
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
            break
    else:
        await message.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
@dp.message(lambda message: message.text == "–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
async def mark_task_as_done(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = await state.get_data()
    task_text = user_data.get("task_to_delete")

    if task_text:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user = await collection.find_one({"user_id": user_id, "tasks.task_text": task_text})
        task = next((t for t in user["tasks"] if t["task_text"] == task_text), None)

        if task:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞
            deadline = datetime.strptime(task["deadline"], "%d-%m-%Y %H:%M")
            now = datetime.now()
            if now > deadline:
                await message.answer("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é.")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await collection.update_one(
                {"user_id": user_id, "tasks.task_text": task_text},
                {"$set": {"tasks.$.status": "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"}}
            )
            await message.answer(f"–ó–∞–¥–∞—á–∞ '{task_text}' –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è ‚úÖ.")

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
            await show_todo_list(message)
        else:
            await message.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_keyboard)
    else:
        await message.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ —Å "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" –Ω–∞ "–≤ –æ–∂–∏–¥–∞–Ω–∏–∏"
@dp.message(lambda message: message.text == "–í–æ–∑–≤—Ä–∞—Ç –∑–∞–¥–∞—á—É –≤ –æ–∂–∏–¥–∞–Ω–∏–µ")
async def mark_task_as_pending(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = await state.get_data()
    task_text = user_data.get("task_to_delete")

    if task_text:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await collection.update_one(
            {"user_id": user_id, "tasks.task_text": task_text},
            {"$set": {"tasks.$.status": "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"}}
        )
        await message.answer(f"–ó–∞–¥–∞—á–∞ '{task_text}' –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–µ üü°.")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
        await show_todo_list(message)
    else:
        await message.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
@dp.message(lambda message: message.text == "–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏")
async def delete_task(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_data = await state.get_data()
    task_text = user_data.get("task_to_delete")

    if task_text:
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await collection.update_one(
            {"user_id": user_id},
            {"$pull": {"tasks": {"task_text": task_text}}}
        )
        await message.answer(f"–ó–∞–¥–∞—á–∞ '{task_text}' —É–¥–∞–ª–µ–Ω–∞ üóëÔ∏è.")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
        await show_todo_list(message)
    else:
        await message.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
@dp.message(lambda message: message.text == "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á")
async def back_to_tasks(message: types.Message):
    await show_todo_list(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"
@dp.message(lambda message: message.text == "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏")
async def add_task(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
    await state.set_state(TaskForm.waiting_for_task)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
@dp.message(TaskForm.waiting_for_task)
async def get_task_text(message: types.Message, state: FSMContext):
    task_text = message.text
    await state.update_data(task_text=task_text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì:")
    await state.set_state(TaskForm.waiting_for_deadline_date)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã –¥–µ–¥–ª–∞–π–Ω–∞
@dp.message(TaskForm.waiting_for_deadline_date)
async def get_deadline_date(message: types.Message, state: FSMContext):
    try:
        deadline_date = message.text
        deadline_datetime = datetime.strptime(deadline_date, "%d-%m-%Y")
        now = datetime.now()
        if deadline_datetime.date() < now.date():
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì:")
            return
        await state.update_data(deadline_date=deadline_date)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–µ–¥–ª–∞–π–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç):")
        await state.set_state(TaskForm.waiting_for_deadline_time)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ–§—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î-–ú–ú-–ì–ì–ì–ì.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–µ–¥–ª–∞–π–Ω–∞
@dp.message(TaskForm.waiting_for_deadline_time)
async def get_deadline_time(message: types.Message, state: FSMContext):
    try:
        deadline_time = message.text
        datetime.strptime(deadline_time, "%H:%M")  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        user_data = await state.get_data()
        task_text = user_data.get('task_text')
        deadline_date = user_data.get('deadline_date')

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Å—Ç—Ä–æ–∫—É
        deadline_str = f"{deadline_date} {deadline_time}"
        deadline = datetime.strptime(deadline_str, "%d-%m-%Y %H:%M")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–¥–ª–∞–π–Ω –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        now = datetime.now()
        if deadline < now:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
            return

        await state.update_data(deadline=deadline_str)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ –∑–∞–¥–∞—á–µ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
        await state.set_state(TaskForm.waiting_for_notes)

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç).")


@dp.message(lambda message: message.text == "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞ –∑–∞–¥–∞—á–∏")
async def change_deadline(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì:")
    await state.set_state(TaskForm.waiting_for_new_deadline_date)


@dp.message(TaskForm.waiting_for_new_deadline_date)
async def get_new_deadline_date(message: types.Message, state: FSMContext):
    try:
        new_deadline_date = message.text
        deadline_datetime = datetime.strptime(new_deadline_date, "%d-%m-%Y")
        now = datetime.now()
        if deadline_datetime.date() < now.date():
            await message.answer(
                "‚ùå –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì:")
            return
        await state.update_data(new_deadline_date=new_deadline_date)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–µ–¥–ª–∞–π–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç):")
        await state.set_state(TaskForm.waiting_for_new_deadline_time)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î-–ú–ú-–ì–ì–ì–ì.")


@dp.message(TaskForm.waiting_for_new_deadline_time)
async def get_new_deadline_time(message: types.Message, state: FSMContext):
    try:
        new_deadline_time = message.text
        datetime.strptime(new_deadline_time, "%H:%M")  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        user_data = await state.get_data()
        task_text = user_data.get('task_to_delete')
        new_deadline_date = user_data.get('new_deadline_date')

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Å—Ç—Ä–æ–∫—É
        new_deadline_str = f"{new_deadline_date} {new_deadline_time}"
        new_deadline = datetime.strptime(new_deadline_str, "%d-%m-%Y %H:%M")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–µ–¥–ª–∞–π–Ω –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        now = datetime.now()
        if new_deadline < now:
            await message.answer(
                "‚ùå –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
            return

        user_id = message.from_user.id

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await collection.update_one(
            {"user_id": user_id, "tasks.task_text": task_text},
            {"$set": {"tasks.$.deadline": new_deadline_str}}
        )

        await message.answer(f"–î–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏ '{task_text}' —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_deadline_str}.")
        await state.clear()
        await show_todo_list(message)

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç).")

@dp.message(TaskForm.waiting_for_notes)
async def get_notes(message: types.Message, state: FSMContext):
    if message.text == "/skip":
        await state.update_data(notes="")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
        await message.answer("–ü—Ä–∏–º–µ—á–∞–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        await state.set_state(TaskForm.waiting_for_notes_media)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—é —Ñ–∞–π–ª–æ–≤
    else:
        await state.update_data(notes=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
        await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ —Ñ–∞–π–ª—ã –∫ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è–º. –ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ /skip.")
        await state.set_state(TaskForm.waiting_for_notes_media)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—é —Ñ–∞–π–ª–æ–≤

@dp.message(lambda message: message.text == "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∑–∞–¥–∞—á–∏")
async def change_notes(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏:")
    await state.set_state(TaskForm.waiting_for_new_notes)

@dp.message(TaskForm.waiting_for_new_notes)
async def get_new_notes(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    task_text = user_data.get('task_to_delete')
    user_id = message.from_user.id

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await collection.update_one(
        {"user_id": user_id, "tasks.task_text": task_text},
        {"$set": {"tasks.$.notes": message.text}}
    )

    await message.answer(f"–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ '{task_text}' —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.")
    await state.clear()
    await show_todo_list(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
@dp.message(TaskForm.waiting_for_notes_media, lambda message: message.photo or message.document)
async def get_notes_media(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    notes_media = user_data.get("notes_media", [])

    if message.photo:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
        file_id = message.photo[-1].file_id
        notes_media.append({"type": "photo", "file_id": file_id})
    elif message.document:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        file_id = message.document.file_id
        notes_media.append({"type": "document", "file_id": file_id})

    await state.update_data(notes_media=notes_media)
    await message.answer("–§–∞–π–ª –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")

@dp.message(TaskForm.waiting_for_notes_media, lambda message: message.text == "/skip")
async def skip_notes_media(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    task_text = user_data.get('task_text')
    deadline = user_data.get('deadline')
    notes = user_data.get('notes', '')  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)
    notes_media = user_data.get('notes_media', [])  # –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)

    user_id = message.from_user.id
    username = message.from_user.username

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await collection.update_one(
        {"user_id": user_id},
        {
            "$setOnInsert": {"user_id": user_id, "username": username},
            "$push": {
                "tasks": {
                    "task_text": task_text,
                    "deadline": deadline,
                    "notes": notes,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ (–¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–æ –ø—É—Å—Ç–æ–µ)
                    "notes_media": notes_media,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã (–¥–∞–∂–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
                    "status": "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"
                }
            }
        },
        upsert=True
    )

    await message.answer(f"–ó–∞–¥–∞—á–∞ '{task_text}' —Å –¥–µ–¥–ª–∞–π–Ω–æ–º '{deadline}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await show_todo_list(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –¥–µ–ª–∞ –ø–æ –¥–∞—Ç–µ"
@dp.message(lambda message: message.text == "–£–¥–∞–ª–µ–Ω–∏–µ –¥–µ–ª –ø–æ –¥–∞—Ç–µ")
async def delete_tasks_by_date(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á:")
    await state.set_state(TaskForm.waiting_for_date_to_delete)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ –¥–∞—Ç–µ
@dp.message(TaskForm.waiting_for_date_to_delete)
async def delete_tasks_by_date_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    date_to_delete = message.text

    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç datetime
        date_to_delete = datetime.strptime(date_to_delete, "%d-%m-%Y").date()

        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π
        await collection.update_one(
            {"user_id": user_id},
            {"$pull": {"tasks": {"deadline": {"$regex": f"{date_to_delete.strftime('%d-%m-%Y')}"}}}}
        )
        await message.answer(f"–í—Å–µ –∑–∞–¥–∞—á–∏ –Ω–∞ {date_to_delete.strftime('%d-%m-%Y')} —É–¥–∞–ª–µ–Ω—ã üóëÔ∏è.")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î-–ú–ú-–ì–ì–ì–ì.")

    await state.clear()
    await show_todo_list(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"
@dp.message(lambda message: message.text == "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏")
async def change_task_name(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    await state.set_state(TaskForm.waiting_for_new_task_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
@dp.message(TaskForm.waiting_for_new_task_text)
async def get_new_task_name(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    old_task_text = user_data.get("task_to_delete")  # –°—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    new_task_text = message.text  # –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    user_id = message.from_user.id

    if not old_task_text:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await collection.update_one(
        {"user_id": user_id, "tasks.task_text": old_task_text},
        {"$set": {"tasks.$.task_text": new_task_text}}
    )

    await message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ —Å '{old_task_text}' –Ω–∞ '{new_task_text}'.")
    await state.clear()
    await show_todo_list(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@dp.message(lambda message: message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: types.Message):
    user_id = message.from_user.id
    tasks = await get_todo_list(user_id)

    if tasks:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–¥ –ø–æ–¥—Å—á–µ—Ç–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        updated_tasks = []
        for task in tasks:
            updated_task = await update_task_status(task)
            updated_tasks.append(updated_task)

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        statuses = [task.get("status", "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ") for task in updated_tasks]

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Counter –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        status_counts = Counter(statuses)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–∞–º:</b>\n"
        stats_text += f"üü° –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {status_counts.get('–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ', 0)}\n"
        stats_text += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {status_counts.get('–≤—ã–ø–æ–ª–Ω–µ–Ω–æ', 0)}\n"
        stats_text += f"‚ùå –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {status_counts.get('–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ', 0)}\n"

        await message.answer(stats_text, parse_mode="HTML")
    else:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"
@dp.message(lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
async def edit_task_media(message: types.Message, state: FSMContext):
    await message.answer(
        "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ.\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã (—Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã), —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /delete_media –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã")],
                [KeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–µ")]
            ],
            resize_keyboard=True
        )
    )
    await state.set_state(TaskForm.waiting_for_edit_media)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
@dp.message(TaskForm.waiting_for_edit_media, lambda message: message.photo or message.document)
async def add_new_media(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    task_text = user_data.get("task_to_delete")
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∞–π–ª—ã –∑–∞–¥–∞—á–∏
    user = await collection.find_one({"user_id": user_id, "tasks.task_text": task_text})
    task = next((t for t in user["tasks"] if t["task_text"] == task_text), None)
    notes_media = task.get("notes_media", [])

    if message.photo:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
        file_id = message.photo[-1].file_id
        notes_media.append({"type": "photo", "file_id": file_id})
    elif message.document:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        file_id = message.document.file_id
        notes_media.append({"type": "document", "file_id": file_id})

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await collection.update_one(
        {"user_id": user_id, "tasks.task_text": task_text},
        {"$set": {"tasks.$.notes_media": notes_media}}
    )

    await message.answer("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ñ–∞–π–ª—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
@dp.message(TaskForm.waiting_for_edit_media, lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã")
async def delete_all_media(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    task_text = user_data.get("task_to_delete")
    user_id = message.from_user.id

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –∑–∞–¥–∞—á–∏
    await collection.update_one(
        {"user_id": user_id, "tasks.task_text": task_text},
        {"$set": {"tasks.$.notes_media": []}}
    )

    await message.answer("–í—Å–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã.")
    await state.set_state(TaskForm.waiting_for_edit_media)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
@dp.message(TaskForm.waiting_for_edit_media, lambda message: message.text == "–ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–µ")
async def finish_editing_media(message: types.Message, state: FSMContext):
    await state.clear()
    await show_task_details(message, state)

@dp.message(lambda message: message.text == "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def set_reminder(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì:")
    await state.set_state(TaskForm.waiting_for_reminder_date)

@dp.message(TaskForm.waiting_for_reminder_date)
async def get_reminder_date(message: types.Message, state: FSMContext):
    try:
        reminder_date = message.text
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
        datetime.strptime(reminder_date, "%d-%m-%Y")
        await state.update_data(reminder_date=reminder_date)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç):")
        await state.set_state(TaskForm.waiting_for_reminder_time)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î-–ú–ú-–ì–ì–ì–ì.")
@dp.message(TaskForm.waiting_for_reminder_time)
async def get_reminder_time(message: types.Message, state: FSMContext):
    try:
        reminder_time = message.text
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        datetime.strptime(reminder_time, "%H:%M")

        user_data = await state.get_data()
        reminder_date = user_data.get("reminder_date")
        task_text = user_data.get("task_to_delete")
        user_id = message.from_user.id

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        reminder_datetime_str = f"{reminder_date} {reminder_time}"
        reminder_datetime = datetime.strptime(reminder_datetime_str, "%d-%m-%Y %H:%M")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        now = datetime.now()
        if reminder_datetime < now:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ø—Ä–æ—à–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await collection.update_one(
            {"user_id": user_id, "tasks.task_text": task_text},
            {"$set": {"tasks.$.reminder": reminder_datetime_str}}
        )

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Celery
        send_reminder.apply_async(
            args=[user_id, task_text, reminder_datetime_str],
            eta=reminder_datetime
        )

        await message.answer(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏ '{task_text}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {reminder_datetime_str}.")
        await state.clear()
        await show_todo_list(message)

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç).")

@dp.message(lambda message: message.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_menu(message: types.Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_keyboard)
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await check_connection()
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())